
from __future__ import print_function
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
# number 1 to 10 data

mnist = input_data.read_data_sets('D:\研究生文件\深度学习\课程项目\手写数字识别\MNIST_data', one_hot=True)
#还是得自己下载到本地，用网上的在线下载不好使
def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 1})#预测结果
    correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))#=1表示每一行的比较，返回最大值的索引
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))#tf.cast将(a,b)中a的格式转为b的格式
    result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys, keep_prob: 1})#feed_back即喂值，冒号后的值喂给冒号前的变量
    return result

def weight_variable(shape):#初始权重
    initial = tf.truncated_normal(shape, stddev=0.1)#标准差
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)#初始化
    return tf.Variable(initial)

def conv2d(x, W):#2维卷积核
    # stride [1, x_movement, y_movement, 1]
    # Must have strides[0] = strides[3] = 1
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')#SAME表示可以出边界
    #strides规定，前后必须为1，中间2个数代表横竖步幅
    # tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, name=None)

def max_pool_2x2(x):
    # stride [1, x_movement, y_movement, 1]
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
#池化窗口的大小，取一个四维向量，一般是[1, height, width, 1]，
# 因为我们不想在batch和channels上做池化，所以这两个维度设为了1

# define placeholder for inputs to network
xs = tf.placeholder(tf.float32, [None, 784])   # 28x28；列是784，行不定
ys = tf.placeholder(tf.float32, [None, 10])#占位符；列是10，行不定。需要赋值的时候才赋值
keep_prob = tf.placeholder(tf.float32)  # 定义了dropout的placeholder,防止过拟合
#把xs的形状变成[-1,28,28,1]，-1代表先不考虑输入的图片例子多少这个维度，后面的1是channel的数量，
# 因为我们输入的图片是黑白的，因此channel是1，例如如果是RGB图像，那么channel就是3
x_image = tf.reshape(xs, [-1, 28, 28, 1])#重新组成28x28

## conv1 layer ##
W_conv1 = weight_variable([5,5, 1,32]) # patch 5x5, in size channel 1, out size 32 输出32个featuremap
b_conv1 = bias_variable([32])
h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) # output size 28x28x32
h_pool1 = max_pool_2x2(h_conv1)  # output size 14x14x32

## conv2 layer ##
W_conv2 = weight_variable([5,5, 32, 64]) # patch 5x5, in size 32, out size 64 输出64个featuremap 这是自己定义的
b_conv2 = bias_variable([64])
h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) # output size 14x14x64
h_pool2 = max_pool_2x2(h_conv2)  # output size 7x7x64

## fc1 layer ##
W_fc1 = weight_variable([7*7*64, 1024]) # 输入大小7*7*64 输出大小1024.
b_fc1 = bias_variable([1024])
# 进入全连接层时, 我们通过tf.reshape()将h_pool2的输出值从一个三维的变为一维的数据,
# -1表示先不考虑输入图片例子维度, 将上一个输出结果展平.
h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)#keep_prob为保留概率

## fc2 layer ##
W_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])
prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)#预测结果

